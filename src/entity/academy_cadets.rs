//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "academy_cadets")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub character_id: i32,
    pub faction: Option<String>,
    pub academy_id: i32,
    pub academy_team_id: i32,
    pub is_invited: i8,
    pub is_uninvited: i8,
    pub uninvite_reason: Option<String>,
    #[sea_orm(column_name = "inviteTime")]
    pub invite_time: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::academies::Entity",
        from = "Column::AcademyId",
        to = "super::academies::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Academies,
    #[sea_orm(has_many = "super::academy_behaviors::Entity")]
    AcademyBehaviors,
    #[sea_orm(has_many = "super::academy_exam_results::Entity")]
    AcademyExamResults,
    #[sea_orm(
        belongs_to = "super::academy_teams::Entity",
        from = "Column::AcademyTeamId",
        to = "super::academy_teams::Column::Id",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    AcademyTeams,
}

impl Related<super::academies::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Academies.def()
    }
}

impl Related<super::academy_behaviors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyBehaviors.def()
    }
}

impl Related<super::academy_exam_results::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyExamResults.def()
    }
}

impl Related<super::academy_teams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyTeams.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
