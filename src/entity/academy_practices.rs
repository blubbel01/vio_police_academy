//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "academy_practices")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub short: String,
    pub points: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::academy_practice_options::Entity")]
    AcademyPracticeOptions,
    #[sea_orm(has_many = "super::academy_template_practices_relation::Entity")]
    AcademyTemplatePracticesRelation,
}

impl Related<super::academy_practice_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyPracticeOptions.def()
    }
}

impl Related<super::academy_template_practices_relation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyTemplatePracticesRelation.def()
    }
}

impl Related<super::academy_templates::Entity> for Entity {
    fn to() -> RelationDef {
        super::academy_template_practices_relation::Relation::AcademyTemplates.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::academy_template_practices_relation::Relation::AcademyPractices
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
