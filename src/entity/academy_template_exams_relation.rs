//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "academy_template_exams_relation")]
pub struct Model {
    #[sea_orm(column_type = "Double")]
    pub percentage: f64,
    #[sea_orm(column_name = "academyTemplateId", primary_key, auto_increment = false)]
    pub academy_template_id: i32,
    #[sea_orm(column_name = "academyExamId", primary_key, auto_increment = false)]
    pub academy_exam_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::academy_exams::Entity",
        from = "Column::AcademyExamId",
        to = "super::academy_exams::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    AcademyExams,
    #[sea_orm(
        belongs_to = "super::academy_templates::Entity",
        from = "Column::AcademyTemplateId",
        to = "super::academy_templates::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    AcademyTemplates,
}

impl Related<super::academy_exams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyExams.def()
    }
}

impl Related<super::academy_templates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AcademyTemplates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
